# -*- coding: utf-8 -*-

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В mastermind_engine нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       проверяем что пользователь ввел допустимое число (4 цифры, все цифры разные, не начинается с 0)
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем (вывод на консоль и запрос ввода от пользователя) делать в 01_mastermind.py.
# Движок игры реализует только саму функциональность игры. Разделяем: mastermind_engine работает
# только с загаданным числом, а 01_mastermind - с пользователем и просто передает числа на проверку движку.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT

#

"""

Игра «Быки и коровы»
Правила:
Компьютер загадывает четырехзначное число, все цифры которого различны
(первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
Игрок вводит четырехзначное число c неповторяющимися цифрами,
компьютер сообщают о количестве «быков» и «коров» в названном числе
«бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
      что и в задуманном числе
«корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
      что и в задуманном числе

Например, если задумано число 3275 и названо число 1234,
получаем в названном числе одного «быка» и одну «корову».
Очевидно, что число отгадано в том случае, если имеем 4 «быка».

"""

from mastermind_engine import mystery_number, check_number, end_game
import termcolor as tc

count = 1


# TODO разделить на две функции!
def input_and_check(data, text):
    while True:
        user_input = input(tc.colored(text, 'green', ))
        if data == 1:
            # TODO логику выносим в API, тут только одно условие!
            if user_input.isdigit() and user_input[0] != "0":
                temp = set(user_input)
                if len(temp) == 4:
                    break
        # TODO это во вторую функцию
        elif data == 2:
            if user_input == "y" or user_input == "n":
                break
        print(f"Ошибка! повторите ввод!")
    return user_input


def new_game():
    if input_and_check(2, 'Игра «Быки и коровы»! \n Распечатать правила? (y/n): ') == "y":
        print(__doc__)
    tc.cprint("Игра началась!", 'red')
    # mystery_number()
    # print(mystery_number())
    print("Компьютер загадал число XXXX")


new_game()
while True:
    user_input_number = input_and_check(1, f"Отгадайте число которое загадал компьютер. Раунд № {count}: ")
    # print(check_number(user_input_number))
    answer = check_number(user_input_number)
    print(f"Быки - {answer['bulls']}, коровы - {answer['crows']}")
    count += 1
    if end_game(user_input_number):
        # TODO все что ниже вынести в отдельную функцию! Придумать как выйти из Игры логически! Без применения
        #  дополнительных функций!
        print(f"You WIN!!! Тебе понадобилось {count-1} раунда")
        if input_and_check(2, 'Еще раз? (y/n): ') == "y":
            count = 1
            new_game()
        else:
            break
